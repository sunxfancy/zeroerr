
#pragma push_macro("IF")
#pragma push_macro("IS_INT")
#pragma push_macro("IS_FLOAT")
#pragma push_macro("IS_CONTAINER")
#pragma push_macro("IS_STRING")
#pragma push_macro("IS_POINTER")
#pragma push_macro("IS_CHAR")
#pragma push_macro("IS_WCHAR")
#pragma push_macro("IS_CLASS")
#pragma push_macro("IS_STREAMABLE")
#pragma push_macro("IS_ARRAY")
#pragma push_macro("IS_COMPLEX")
#pragma push_macro("IS_BOOL")


#define ENABLE_IF(x) template<typename T> typename std::enable_if<x, void>::type 
#define IS_INT   std::is_integral<T>::value
#define IS_FLOAT std::is_floating_point<T>::value
#define IS_CONTAINER detail::is_container<T>::value
#define IS_STRING detail::is_string<T>::value
#define IS_POINTER std::is_pointer<T>::value
#define IS_CHAR std::is_same<T, char>::value
#define IS_WCHAR std::is_same<T, wchar_t>::value
#define IS_CLASS std::is_class<T>::value
#define IS_STREAMABLE detail::is_streamable<std::ostream, T>::value
#define IS_ARRAY detail::is_array<T>::value
#define IS_COMPLEX detail::is_complex<T>::value
#define IS_BOOL std::is_same<T, bool>::value
#define IS_AUTOPTR (detail::is_specialization<T, std::unique_ptr>::value \
                 || detail::is_specialization<T, std::shared_ptr>::value \
                 || detail::is_specialization<T, std::weak_ptr>::value)
#define IS_MAP detail::ele_type_is_pair<T>::value
